// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	cipher "restinterface/cipher"
	client "restinterface/client"
)

// MockClienter is a mock of Clienter interface
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// SetCipher mocks base method
func (m *MockClienter) SetCipher(cipher cipher.IEdgeCipherer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCipher", cipher)
}

// SetCipher indicates an expected call of SetCipher
func (mr *MockClienterMockRecorder) SetCipher(cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCipher", reflect.TypeOf((*MockClienter)(nil).SetCipher), cipher)
}

// DoExecuteRemoteDevice mocks base method
func (m *MockClienter) DoExecuteRemoteDevice(appInfo map[string]interface{}, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoExecuteRemoteDevice", appInfo, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoExecuteRemoteDevice indicates an expected call of DoExecuteRemoteDevice
func (mr *MockClienterMockRecorder) DoExecuteRemoteDevice(appInfo, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExecuteRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoExecuteRemoteDevice), appInfo, target)
}

// DoNotifyAppStatusRemoteDevice mocks base method
func (m *MockClienter) DoNotifyAppStatusRemoteDevice(statusNotificationInfo map[string]interface{}, appID uint64, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoNotifyAppStatusRemoteDevice", statusNotificationInfo, appID, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoNotifyAppStatusRemoteDevice indicates an expected call of DoNotifyAppStatusRemoteDevice
func (mr *MockClienterMockRecorder) DoNotifyAppStatusRemoteDevice(statusNotificationInfo, appID, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoNotifyAppStatusRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoNotifyAppStatusRemoteDevice), statusNotificationInfo, appID, target)
}

// DoGetScoreRemoteDevice mocks base method
func (m *MockClienter) DoGetScoreRemoteDevice(devID, appName, endpoint string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetScoreRemoteDevice", devID, appName, endpoint)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetScoreRemoteDevice indicates an expected call of DoGetScoreRemoteDevice
func (mr *MockClienterMockRecorder) DoGetScoreRemoteDevice(devID, appName, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetScoreRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoGetScoreRemoteDevice), devID, appName, endpoint)
}

// MockSetter is a mock of Setter interface
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
}

// MockSetterMockRecorder is the mock recorder for MockSetter
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// SetClient mocks base method
func (m *MockSetter) SetClient(clientAPI client.Clienter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", clientAPI)
}

// SetClient indicates an expected call of SetClient
func (mr *MockSetterMockRecorder) SetClient(clientAPI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockSetter)(nil).SetClient), clientAPI)
}
