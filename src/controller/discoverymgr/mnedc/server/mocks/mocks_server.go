/*******************************************************************************
 * Copyright 2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: controller/discoverymgr/mnedc/server (interfaces: MNEDCServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	server "github.com/lf-edge/edge-home-orchestration-go/src/controller/discoverymgr/mnedc/server"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockMNEDCServer is a mock of MNEDCServer interface.
type MockMNEDCServer struct {
	ctrl     *gomock.Controller
	recorder *MockMNEDCServerMockRecorder
}

// MockMNEDCServerMockRecorder is the mock recorder for MockMNEDCServer.
type MockMNEDCServerMockRecorder struct {
	mock *MockMNEDCServer
}

// NewMockMNEDCServer creates a new mock instance.
func NewMockMNEDCServer(ctrl *gomock.Controller) *MockMNEDCServer {
	mock := &MockMNEDCServer{ctrl: ctrl}
	mock.recorder = &MockMNEDCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMNEDCServer) EXPECT() *MockMNEDCServerMockRecorder {
	return m.recorder
}

// AcceptRoutine mocks base method.
func (m *MockMNEDCServer) AcceptRoutine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptRoutine")
}

// AcceptRoutine indicates an expected call of AcceptRoutine.
func (mr *MockMNEDCServerMockRecorder) AcceptRoutine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRoutine", reflect.TypeOf((*MockMNEDCServer)(nil).AcceptRoutine))
}

// Close mocks base method.
func (m *MockMNEDCServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMNEDCServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMNEDCServer)(nil).Close))
}

// CreateServer mocks base method.
func (m *MockMNEDCServer) CreateServer(arg0, arg1 string, arg2 bool) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockMNEDCServerMockRecorder) CreateServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockMNEDCServer)(nil).CreateServer), arg0, arg1, arg2)
}

// DispatchRoutine mocks base method.
func (m *MockMNEDCServer) DispatchRoutine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DispatchRoutine")
}

// DispatchRoutine indicates an expected call of DispatchRoutine.
func (mr *MockMNEDCServerMockRecorder) DispatchRoutine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchRoutine", reflect.TypeOf((*MockMNEDCServer)(nil).DispatchRoutine))
}

// GetClientIPMap mocks base method.
func (m *MockMNEDCServer) GetClientIPMap() map[string]server.IPTypes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIPMap")
	ret0, _ := ret[0].(map[string]server.IPTypes)
	return ret0
}

// GetClientIPMap indicates an expected call of GetClientIPMap.
func (mr *MockMNEDCServerMockRecorder) GetClientIPMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIPMap", reflect.TypeOf((*MockMNEDCServer)(nil).GetClientIPMap))
}

// HandleConnection mocks base method.
func (m *MockMNEDCServer) HandleConnection(arg0 net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConnection", arg0)
}

// HandleConnection indicates an expected call of HandleConnection.
func (mr *MockMNEDCServerMockRecorder) HandleConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnection", reflect.TypeOf((*MockMNEDCServer)(nil).HandleConnection), arg0)
}

// RemoveClient mocks base method.
func (m *MockMNEDCServer) RemoveClient(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClient", arg0)
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockMNEDCServerMockRecorder) RemoveClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockMNEDCServer)(nil).RemoveClient), arg0)
}

// Route mocks base method.
func (m *MockMNEDCServer) Route(arg0 *server.NetPacket) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Route", arg0)
}

// Route indicates an expected call of Route.
func (mr *MockMNEDCServerMockRecorder) Route(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockMNEDCServer)(nil).Route), arg0)
}

// Run mocks base method.
func (m *MockMNEDCServer) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockMNEDCServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMNEDCServer)(nil).Run))
}

// SetClientAddress mocks base method.
func (m *MockMNEDCServer) SetClientAddress(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientAddress", arg0, arg1)
}

// SetClientAddress indicates an expected call of SetClientAddress.
func (mr *MockMNEDCServerMockRecorder) SetClientAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientAddress", reflect.TypeOf((*MockMNEDCServer)(nil).SetClientAddress), arg0, arg1)
}

// SetClientIP mocks base method.
func (m *MockMNEDCServer) SetClientIP(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientIP", arg0, arg1, arg2)
}

// SetClientIP indicates an expected call of SetClientIP.
func (mr *MockMNEDCServerMockRecorder) SetClientIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientIP", reflect.TypeOf((*MockMNEDCServer)(nil).SetClientIP), arg0, arg1, arg2)
}

// SetVirtualIP mocks base method.
func (m *MockMNEDCServer) SetVirtualIP(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVirtualIP", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetVirtualIP indicates an expected call of SetVirtualIP.
func (mr *MockMNEDCServerMockRecorder) SetVirtualIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVirtualIP", reflect.TypeOf((*MockMNEDCServer)(nil).SetVirtualIP), arg0)
}

// TunReadRoutine mocks base method.
func (m *MockMNEDCServer) TunReadRoutine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TunReadRoutine")
}

// TunReadRoutine indicates an expected call of TunReadRoutine.
func (mr *MockMNEDCServerMockRecorder) TunReadRoutine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TunReadRoutine", reflect.TypeOf((*MockMNEDCServer)(nil).TunReadRoutine))
}

// TunWriteRoutine mocks base method.
func (m *MockMNEDCServer) TunWriteRoutine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TunWriteRoutine")
}

// TunWriteRoutine indicates an expected call of TunWriteRoutine.
func (mr *MockMNEDCServerMockRecorder) TunWriteRoutine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TunWriteRoutine", reflect.TypeOf((*MockMNEDCServer)(nil).TunWriteRoutine))
}
