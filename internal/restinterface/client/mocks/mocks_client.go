/*******************************************************************************
 * Copyright 2019-2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: restinterface/client (interfaces: Clienter,Setter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cipher "github.com/lf-edge/edge-home-orchestration-go/internal/restinterface/cipher"
	client "github.com/lf-edge/edge-home-orchestration-go/internal/restinterface/client"

	gomock "github.com/golang/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// DoExecuteRemoteDevice mocks base method.
func (m *MockClienter) DoExecuteRemoteDevice(arg0 map[string]interface{}, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoExecuteRemoteDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoExecuteRemoteDevice indicates an expected call of DoExecuteRemoteDevice.
func (mr *MockClienterMockRecorder) DoExecuteRemoteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExecuteRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoExecuteRemoteDevice), arg0, arg1)
}

// DoGetOrchestrationInfo mocks base method.
func (m *MockClienter) DoGetOrchestrationInfo(arg0 string) (string, string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetOrchestrationInfo", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DoGetOrchestrationInfo indicates an expected call of DoGetOrchestrationInfo.
func (mr *MockClienterMockRecorder) DoGetOrchestrationInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetOrchestrationInfo", reflect.TypeOf((*MockClienter)(nil).DoGetOrchestrationInfo), arg0)
}

// DoGetResourceRemoteDevice mocks base method.
func (m *MockClienter) DoGetResourceRemoteDevice(arg0, arg1 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetResourceRemoteDevice", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetResourceRemoteDevice indicates an expected call of DoGetResourceRemoteDevice.
func (mr *MockClienterMockRecorder) DoGetResourceRemoteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetResourceRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoGetResourceRemoteDevice), arg0, arg1)
}

// DoGetScoreRemoteDevice mocks base method.
func (m *MockClienter) DoGetScoreRemoteDevice(arg0, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetScoreRemoteDevice", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetScoreRemoteDevice indicates an expected call of DoGetScoreRemoteDevice.
func (mr *MockClienterMockRecorder) DoGetScoreRemoteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetScoreRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoGetScoreRemoteDevice), arg0, arg1)
}

// DoNotifyAppStatusRemoteDevice mocks base method.
func (m *MockClienter) DoNotifyAppStatusRemoteDevice(arg0 map[string]interface{}, arg1 uint64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoNotifyAppStatusRemoteDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoNotifyAppStatusRemoteDevice indicates an expected call of DoNotifyAppStatusRemoteDevice.
func (mr *MockClienterMockRecorder) DoNotifyAppStatusRemoteDevice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoNotifyAppStatusRemoteDevice", reflect.TypeOf((*MockClienter)(nil).DoNotifyAppStatusRemoteDevice), arg0, arg1, arg2)
}

// DoNotifyMNEDCBroadcastServer mocks base method.
func (m *MockClienter) DoNotifyMNEDCBroadcastServer(arg0 string, arg1 int, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoNotifyMNEDCBroadcastServer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoNotifyMNEDCBroadcastServer indicates an expected call of DoNotifyMNEDCBroadcastServer.
func (mr *MockClienterMockRecorder) DoNotifyMNEDCBroadcastServer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoNotifyMNEDCBroadcastServer", reflect.TypeOf((*MockClienter)(nil).DoNotifyMNEDCBroadcastServer), arg0, arg1, arg2, arg3, arg4)
}

// SetCipher mocks base method.
func (m *MockClienter) SetCipher(arg0 cipher.IEdgeCipherer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCipher", arg0)
}

// SetCipher indicates an expected call of SetCipher.
func (mr *MockClienterMockRecorder) SetCipher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCipher", reflect.TypeOf((*MockClienter)(nil).SetCipher), arg0)
}

// MockSetter is a mock of Setter interface.
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
}

// MockSetterMockRecorder is the mock recorder for MockSetter.
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance.
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// SetClient mocks base method.
func (m *MockSetter) SetClient(arg0 client.Clienter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockSetterMockRecorder) SetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockSetter)(nil).SetClient), arg0)
}
