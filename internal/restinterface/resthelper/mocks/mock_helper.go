/*******************************************************************************
 * Copyright 2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package mock_resthelper is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockRestHelper is a mock of RestHelper interface
type MockRestHelper struct {
	ctrl     *gomock.Controller
	recorder *MockRestHelperMockRecorder
}

// MockRestHelperMockRecorder is the mock recorder for MockRestHelper
type MockRestHelperMockRecorder struct {
	mock *MockRestHelper
}

// NewMockRestHelper creates a new mock instance
func NewMockRestHelper(ctrl *gomock.Controller) *MockRestHelper {
	mock := &MockRestHelper{ctrl: ctrl}
	mock.recorder = &MockRestHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestHelper) EXPECT() *MockRestHelperMockRecorder {
	return m.recorder
}

// MakeTargetURL mocks base method
func (m *MockRestHelper) MakeTargetURL(target string, port int, restapi string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTargetURL", target, port, restapi)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeTargetURL indicates an expected call of MakeTargetURL
func (mr *MockRestHelperMockRecorder) MakeTargetURL(target, port, restapi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTargetURL", reflect.TypeOf((*MockRestHelper)(nil).MakeTargetURL), target, port, restapi)
}

// DoGet mocks base method
func (m *MockRestHelper) DoGet(targetURL string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGet", targetURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGet indicates an expected call of DoGet
func (mr *MockRestHelperMockRecorder) DoGet(targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockRestHelper)(nil).DoGet), targetURL)
}

// DoGetWithBody mocks base method
func (m *MockRestHelper) DoGetWithBody(targetURL string, bodybytes []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetWithBody", targetURL, bodybytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGetWithBody indicates an expected call of DoGetWithBody
func (mr *MockRestHelperMockRecorder) DoGetWithBody(targetURL, bodybytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetWithBody", reflect.TypeOf((*MockRestHelper)(nil).DoGetWithBody), targetURL, bodybytes)
}

// DoPost mocks base method
func (m *MockRestHelper) DoPost(targetURL string, bodybytes []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoPost", targetURL, bodybytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoPost indicates an expected call of DoPost
func (mr *MockRestHelperMockRecorder) DoPost(targetURL, bodybytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPost", reflect.TypeOf((*MockRestHelper)(nil).DoPost), targetURL, bodybytes)
}

// DoDelete mocks base method
func (m *MockRestHelper) DoDelete(targetURL string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", targetURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockRestHelperMockRecorder) DoDelete(targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockRestHelper)(nil).DoDelete), targetURL)
}

// Response mocks base method
func (m *MockRestHelper) Response(w http.ResponseWriter, httpStatus int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Response", w, httpStatus)
}

// Response indicates an expected call of Response
func (mr *MockRestHelperMockRecorder) Response(w, httpStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockRestHelper)(nil).Response), w, httpStatus)
}

// ResponseJSON mocks base method
func (m *MockRestHelper) ResponseJSON(w http.ResponseWriter, bytes []byte, httpStatus int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponseJSON", w, bytes, httpStatus)
}

// ResponseJSON indicates an expected call of ResponseJSON
func (mr *MockRestHelperMockRecorder) ResponseJSON(w, bytes, httpStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseJSON", reflect.TypeOf((*MockRestHelper)(nil).ResponseJSON), w, bytes, httpStatus)
}

// MockurlHelper is a mock of urlHelper interface
type MockurlHelper struct {
	ctrl     *gomock.Controller
	recorder *MockurlHelperMockRecorder
}

// MockurlHelperMockRecorder is the mock recorder for MockurlHelper
type MockurlHelperMockRecorder struct {
	mock *MockurlHelper
}

// NewMockurlHelper creates a new mock instance
func NewMockurlHelper(ctrl *gomock.Controller) *MockurlHelper {
	mock := &MockurlHelper{ctrl: ctrl}
	mock.recorder = &MockurlHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockurlHelper) EXPECT() *MockurlHelperMockRecorder {
	return m.recorder
}

// MakeTargetURL mocks base method
func (m *MockurlHelper) MakeTargetURL(target string, port int, restapi string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTargetURL", target, port, restapi)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeTargetURL indicates an expected call of MakeTargetURL
func (mr *MockurlHelperMockRecorder) MakeTargetURL(target, port, restapi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTargetURL", reflect.TypeOf((*MockurlHelper)(nil).MakeTargetURL), target, port, restapi)
}

// MockrequestHelper is a mock of requestHelper interface
type MockrequestHelper struct {
	ctrl     *gomock.Controller
	recorder *MockrequestHelperMockRecorder
}

// MockrequestHelperMockRecorder is the mock recorder for MockrequestHelper
type MockrequestHelperMockRecorder struct {
	mock *MockrequestHelper
}

// NewMockrequestHelper creates a new mock instance
func NewMockrequestHelper(ctrl *gomock.Controller) *MockrequestHelper {
	mock := &MockrequestHelper{ctrl: ctrl}
	mock.recorder = &MockrequestHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrequestHelper) EXPECT() *MockrequestHelperMockRecorder {
	return m.recorder
}

// DoGet mocks base method
func (m *MockrequestHelper) DoGet(targetURL string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGet", targetURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGet indicates an expected call of DoGet
func (mr *MockrequestHelperMockRecorder) DoGet(targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockrequestHelper)(nil).DoGet), targetURL)
}

// DoGetWithBody mocks base method
func (m *MockrequestHelper) DoGetWithBody(targetURL string, bodybytes []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetWithBody", targetURL, bodybytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoGetWithBody indicates an expected call of DoGetWithBody
func (mr *MockrequestHelperMockRecorder) DoGetWithBody(targetURL, bodybytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetWithBody", reflect.TypeOf((*MockrequestHelper)(nil).DoGetWithBody), targetURL, bodybytes)
}

// DoPost mocks base method
func (m *MockrequestHelper) DoPost(targetURL string, bodybytes []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoPost", targetURL, bodybytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoPost indicates an expected call of DoPost
func (mr *MockrequestHelperMockRecorder) DoPost(targetURL, bodybytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPost", reflect.TypeOf((*MockrequestHelper)(nil).DoPost), targetURL, bodybytes)
}

// DoDelete mocks base method
func (m *MockrequestHelper) DoDelete(targetURL string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", targetURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoDelete indicates an expected call of DoDelete
func (mr *MockrequestHelperMockRecorder) DoDelete(targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockrequestHelper)(nil).DoDelete), targetURL)
}

// MockresponseHelper is a mock of responseHelper interface
type MockresponseHelper struct {
	ctrl     *gomock.Controller
	recorder *MockresponseHelperMockRecorder
}

// MockresponseHelperMockRecorder is the mock recorder for MockresponseHelper
type MockresponseHelperMockRecorder struct {
	mock *MockresponseHelper
}

// NewMockresponseHelper creates a new mock instance
func NewMockresponseHelper(ctrl *gomock.Controller) *MockresponseHelper {
	mock := &MockresponseHelper{ctrl: ctrl}
	mock.recorder = &MockresponseHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockresponseHelper) EXPECT() *MockresponseHelperMockRecorder {
	return m.recorder
}

// Response mocks base method
func (m *MockresponseHelper) Response(w http.ResponseWriter, httpStatus int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Response", w, httpStatus)
}

// Response indicates an expected call of Response
func (mr *MockresponseHelperMockRecorder) Response(w, httpStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockresponseHelper)(nil).Response), w, httpStatus)
}

// ResponseJSON mocks base method
func (m *MockresponseHelper) ResponseJSON(w http.ResponseWriter, bytes []byte, httpStatus int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponseJSON", w, bytes, httpStatus)
}

// ResponseJSON indicates an expected call of ResponseJSON
func (mr *MockresponseHelperMockRecorder) ResponseJSON(w, bytes, httpStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseJSON", reflect.TypeOf((*MockresponseHelper)(nil).ResponseJSON), w, bytes, httpStatus)
}
