/*******************************************************************************
 * Copyright 2019 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	helper "github.com/lf-edge/edge-home-orchestration-go/internal/db/helper"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMultipleBucketQuery is a mock of MultipleBucketQuery interface
type MockMultipleBucketQuery struct {
	ctrl     *gomock.Controller
	recorder *MockMultipleBucketQueryMockRecorder
}

// MockMultipleBucketQueryMockRecorder is the mock recorder for MockMultipleBucketQuery
type MockMultipleBucketQueryMockRecorder struct {
	mock *MockMultipleBucketQuery
}

// NewMockMultipleBucketQuery creates a new mock instance
func NewMockMultipleBucketQuery(ctrl *gomock.Controller) *MockMultipleBucketQuery {
	mock := &MockMultipleBucketQuery{ctrl: ctrl}
	mock.recorder = &MockMultipleBucketQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultipleBucketQuery) EXPECT() *MockMultipleBucketQueryMockRecorder {
	return m.recorder
}

// GetDeviceInfoWithService mocks base method
func (m *MockMultipleBucketQuery) GetDeviceInfoWithService(serviceName string, executionTypes []string) ([]helper.ExecutionCandidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfoWithService", serviceName, executionTypes)
	ret0, _ := ret[0].([]helper.ExecutionCandidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInfoWithService indicates an expected call of GetDeviceInfoWithService
func (mr *MockMultipleBucketQueryMockRecorder) GetDeviceInfoWithService(serviceName, executionTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfoWithService", reflect.TypeOf((*MockMultipleBucketQuery)(nil).GetDeviceInfoWithService), serviceName, executionTypes)
}
