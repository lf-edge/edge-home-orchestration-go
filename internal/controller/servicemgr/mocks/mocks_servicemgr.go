/*******************************************************************************
 * Copyright 2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: ./servicemgr.go

// Package mocks is a generated GoMock package.
package mocks

import (
	executor "github.com/lf-edge/edge-home-orchestration-go/internal/controller/servicemgr/executor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	client "github.com/lf-edge/edge-home-orchestration-go/internal/restinterface/client"
)

// MockServiceMgr is a mock of ServiceMgr interface
type MockServiceMgr struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMgrMockRecorder
}

// MockServiceMgrMockRecorder is the mock recorder for MockServiceMgr
type MockServiceMgrMockRecorder struct {
	mock *MockServiceMgr
}

// NewMockServiceMgr creates a new mock instance
func NewMockServiceMgr(ctrl *gomock.Controller) *MockServiceMgr {
	mock := &MockServiceMgr{ctrl: ctrl}
	mock.recorder = &MockServiceMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceMgr) EXPECT() *MockServiceMgrMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockServiceMgr) Execute(target, name, requester string, args []interface{}, notiChan chan string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", target, name, requester, args, notiChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockServiceMgrMockRecorder) Execute(target, name, requester, args, notiChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockServiceMgr)(nil).Execute), target, name, requester, args, notiChan)
}

// SetLocalServiceExecutor mocks base method
func (m *MockServiceMgr) SetLocalServiceExecutor(s executor.ServiceExecutor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLocalServiceExecutor", s)
}

// SetLocalServiceExecutor indicates an expected call of SetLocalServiceExecutor
func (mr *MockServiceMgrMockRecorder) SetLocalServiceExecutor(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocalServiceExecutor", reflect.TypeOf((*MockServiceMgr)(nil).SetLocalServiceExecutor), s)
}

// ExecuteAppOnLocal mocks base method
func (m *MockServiceMgr) ExecuteAppOnLocal(appInfo map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteAppOnLocal", appInfo)
}

// ExecuteAppOnLocal indicates an expected call of ExecuteAppOnLocal
func (mr *MockServiceMgrMockRecorder) ExecuteAppOnLocal(appInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAppOnLocal", reflect.TypeOf((*MockServiceMgr)(nil).ExecuteAppOnLocal), appInfo)
}

// SetClient mocks base method
func (m *MockServiceMgr) SetClient(clientAPI client.Clienter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", clientAPI)
}

// SetClient indicates an expected call of SetClient
func (mr *MockServiceMgrMockRecorder) SetClient(clientAPI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockServiceMgr)(nil).SetClient), clientAPI)
}
