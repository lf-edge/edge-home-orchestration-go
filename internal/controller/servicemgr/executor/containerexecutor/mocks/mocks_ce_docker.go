// Code generated by MockGen. DO NOT EDIT.
// Source: ./ce_docker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	container "github.com/docker/docker/api/types/container"
	network "github.com/docker/docker/api/types/network"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockCEImpl is a mock of CEImpl interface
type MockCEImpl struct {
	ctrl     *gomock.Controller
	recorder *MockCEImplMockRecorder
}

// MockCEImplMockRecorder is the mock recorder for MockCEImpl
type MockCEImplMockRecorder struct {
	mock *MockCEImpl
}

// NewMockCEImpl creates a new mock instance
func NewMockCEImpl(ctrl *gomock.Controller) *MockCEImpl {
	mock := &MockCEImpl{ctrl: ctrl}
	mock.recorder = &MockCEImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCEImpl) EXPECT() *MockCEImplMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCEImpl) Create(conf *container.Config, hostConf *container.HostConfig, networkConf *network.NetworkingConfig) (container.ContainerCreateCreatedBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", conf, hostConf, networkConf)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCEImplMockRecorder) Create(conf, hostConf, networkConf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCEImpl)(nil).Create), conf, hostConf, networkConf)
}

// Remove mocks base method
func (m *MockCEImpl) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockCEImplMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCEImpl)(nil).Remove), id)
}

// Start mocks base method
func (m *MockCEImpl) Start(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCEImplMockRecorder) Start(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCEImpl)(nil).Start), id)
}

// Wait mocks base method
func (m *MockCEImpl) Wait(id string, condition container.WaitCondition) (<-chan container.ContainerWaitOKBody, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", id, condition)
	ret0, _ := ret[0].(<-chan container.ContainerWaitOKBody)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait
func (mr *MockCEImplMockRecorder) Wait(id, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCEImpl)(nil).Wait), id, condition)
}

// Logs mocks base method
func (m *MockCEImpl) Logs(id string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", id)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs
func (mr *MockCEImplMockRecorder) Logs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockCEImpl)(nil).Logs), id)
}

// ImagePull mocks base method
func (m *MockCEImpl) ImagePull(image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePull", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImagePull indicates an expected call of ImagePull
func (mr *MockCEImplMockRecorder) ImagePull(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePull", reflect.TypeOf((*MockCEImpl)(nil).ImagePull), image)
}
