/*******************************************************************************
* Copyright 2021 Samsung Electronics All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: cloudsync.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mqttmgr "github.com/lf-edge/edge-home-orchestration-go/internal/common/mqtt"
	reflect "reflect"
)

// MockCloudSync is a mock of CloudSync interface
type MockCloudSync struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSyncMockRecorder
}

// MockCloudSyncMockRecorder is the mock recorder for MockCloudSync
type MockCloudSyncMockRecorder struct {
	mock *MockCloudSync
}

// NewMockCloudSync creates a new mock instance
func NewMockCloudSync(ctrl *gomock.Controller) *MockCloudSync {
	mock := &MockCloudSync{ctrl: ctrl}
	mock.recorder = &MockCloudSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCloudSync) EXPECT() *MockCloudSyncMockRecorder {
	return _m.recorder
}

// InitiateCloudSync mocks base method
func (_m *MockCloudSync) InitiateCloudSync(isCloudSet string) error {
	ret := _m.ctrl.Call(_m, "InitiateCloudSync", isCloudSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiateCloudSync indicates an expected call of StartCloudSync
func (_mr *MockCloudSyncMockRecorder) InitiateCloudSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitiateCloudSync", reflect.TypeOf((*MockCloudSync)(nil).StartCloudSync), arg0)
}

// StartCloudSync mocks base method
func (_m *MockCloudSync) StartCloudSync(host string) error {
	ret := _m.ctrl.Call(_m, "StartCloudSync", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCloudSync indicates an expected call of StartCloudSync
func (_mr *MockCloudSyncMockRecorder) StartCloudSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartCloudSync", reflect.TypeOf((*MockCloudSync)(nil).StartCloudSync), arg0)
}

// StartCloudSync mocks base method
func (_m *MockCloudSync) RequestCloudSyncConf(message mqttmgr.Message, host string, clientID string) string {
	ret := _m.ctrl.Call(_m, "RequestCloudSyncConf", host)
	ret0, _ := ret[0].(string)
	return ret0
}

// StartCloudSync indicates an expected call of StartCloudSync
func (_mr *MockCloudSyncMockRecorder) StartCRequestCloudSyncConfloudSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RequestCloudSyncConf", reflect.TypeOf((*MockCloudSync)(nil).StartCloudSync), arg0)
}
