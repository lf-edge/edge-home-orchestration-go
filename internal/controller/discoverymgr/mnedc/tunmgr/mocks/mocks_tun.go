/*******************************************************************************
 * Copyright 2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: controller/discoverymgr/mnedc/tunmgr (interfaces: Tun)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	water "github.com/songgao/water"
	net "net"
	reflect "reflect"
)

// MockTun is a mock of Tun interface.
type MockTun struct {
	ctrl     *gomock.Controller
	recorder *MockTunMockRecorder
}

// MockTunMockRecorder is the mock recorder for MockTun.
type MockTunMockRecorder struct {
	mock *MockTun
}

// NewMockTun creates a new mock instance.
func NewMockTun(ctrl *gomock.Controller) *MockTun {
	mock := &MockTun{ctrl: ctrl}
	mock.recorder = &MockTunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTun) EXPECT() *MockTunMockRecorder {
	return m.recorder
}

// CreateTUN mocks base method.
func (m *MockTun) CreateTUN() (*water.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTUN")
	ret0, _ := ret[0].(*water.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTUN indicates an expected call of CreateTUN.
func (mr *MockTunMockRecorder) CreateTUN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTUN", reflect.TypeOf((*MockTun)(nil).CreateTUN))
}

// SetTUNIP mocks base method.
func (m *MockTun) SetTUNIP(arg0 string, arg1 net.IP, arg2 *net.IPNet, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTUNIP", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTUNIP indicates an expected call of SetTUNIP.
func (mr *MockTunMockRecorder) SetTUNIP(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTUNIP", reflect.TypeOf((*MockTun)(nil).SetTUNIP), arg0, arg1, arg2, arg3)
}

// SetTUNStatus mocks base method.
func (m *MockTun) SetTUNStatus(arg0 string, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTUNStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTUNStatus indicates an expected call of SetTUNStatus.
func (mr *MockTunMockRecorder) SetTUNStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTUNStatus", reflect.TypeOf((*MockTun)(nil).SetTUNStatus), arg0, arg1, arg2)
}
