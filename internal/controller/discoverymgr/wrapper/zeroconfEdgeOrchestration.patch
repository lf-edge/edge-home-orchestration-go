From ddcfb79c2c9c671523113164ec6847192a88249e Mon Sep 17 00:00:00 2001
From: damon92 <damon92.lee@samsung.com>
Date: Thu, 23 May 2019 16:31:01 +0900
Subject: [PATCH 1/3] edge

Signed-off-by: damon92 <damon92.lee@samsung.com>
---
 edgeserver.go | 207 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 server.go     |   2 +-
 2 files changed, 208 insertions(+), 1 deletion(-)
 create mode 100644 edgeserver.go

diff --git a/edgeserver.go b/edgeserver.go
new file mode 100644
index 0000000..3f6c537
--- /dev/null
+++ b/edgeserver.go
@@ -0,0 +1,207 @@
+package zeroconf
+
+import (
+	"net"
+	"strings"
+
+	"errors"
+
+	"github.com/miekg/dns"
+)
+
+var edgeServiceType string
+
+var EdgeExportedServiceEntry chan *ServiceEntry
+
+func EdgeGetSubscriberChan() (chan *ServiceEntry, error) {
+	if EdgeExportedServiceEntry != nil {
+		return nil, errors.New("Subscribe Chan is Made Before")
+	}
+	EdgeExportedServiceEntry = make(chan *ServiceEntry, 20)
+	return EdgeExportedServiceEntry, nil
+}
+
+//EdgeRegisterProxy for Edge
+func EdgeRegisterProxy(instance, service, domain string, port int,
+	host string, ips []string, text []string,
+	ifaces []net.Interface) (*Server, *ServiceEntry, error) {
+
+	edgeServiceType = service
+
+	server, err := RegisterProxy(instance, service, domain, port, host, ips, text, ifaces)
+	if err != nil {
+		return nil, nil, err
+	}
+	err = server.edgeAdvertise()
+	if err != nil {
+		return nil, nil, err
+	}
+	return server, server.service, err
+}
+
+//EdgeGetText returns server's text field
+func (s *Server) EdgeGetText() []string {
+	return s.service.Text
+}
+
+//EdgeInterfaceChg react to interface change.
+//should be called when interface changed.
+func (s *Server) EdgeResetServer(newipv4s []net.IP) {
+	s.service.AddrIPv4 = newipv4s
+	EdgeExportedServiceEntry <- nil
+	s.edgeAdvertise()
+	return
+}
+
+// EdgeHandleQuery is used to handle an incoming query
+func (s *Server) edgeHandleQuery(msg *dns.Msg, ifIndex int, from net.Addr) error {
+	//IsFromIPv4?
+	_, err := s.edgeParseIPv4(from)
+	if err != nil {
+		return err
+	}
+	//Parse Txt and A Record
+	entry, err := s.edgeParseServiceEntry(msg)
+	if err != nil {
+		return err
+	}
+
+	EdgeExportedServiceEntry <- entry
+
+	if msg.Question != nil {
+		err = s.edgeSendUnicastResponse(msg, ifIndex, from)
+	}
+	return err
+}
+
+//EdgeParseIPv4 Palse ipv4 from net.Addr
+func (Server) edgeParseIPv4(from net.Addr) (string, error) {
+	deviceIPPORT := strings.Split(from.String(), ":")
+	srcIP := deviceIPPORT[0]
+
+	isV4 := net.ParseIP(srcIP)
+	if isV4.To4() == nil {
+		return "", errors.New("Do Not Handle IPv6")
+	}
+	return srcIP, nil
+}
+
+//EdgeParseServiceEntry parse ServiceEntry from dns msg
+//filter messages by serviceType "_orchestration._tcp"
+func (Server) edgeParseServiceEntry(msg *dns.Msg) (*ServiceEntry, error) {
+	sections := append(msg.Answer, msg.Ns...)
+	sections = append(sections, msg.Extra...)
+
+	entry := newEntryFromAnswer(sections)
+	if entry == nil {
+		return nil, errors.New("NO TXT && NO SRV")
+	}
+
+	appendEntryIP(entry, sections)
+
+	return entry, nil
+}
+
+func newEntryFromAnswer(sections []dns.RR) *ServiceEntry {
+	var entry *ServiceEntry
+	params := defaultParams(edgeServiceType)
+	for _, answer := range sections {
+		switch rr := answer.(type) {
+		case *dns.TXT:
+			if !serviceNameChecker(params, rr.Hdr.Name) {
+				continue
+			}
+			if entry == nil {
+				entry = NewServiceEntry(trimDot(strings.Replace(rr.Hdr.Name,
+					params.ServiceName(), "", 1)), params.Service, params.Domain)
+			}
+			entry.Text = rr.Txt
+			entry.TTL = rr.Hdr.Ttl
+		case *dns.SRV:
+			//SRV To Get HostName
+			if !serviceNameChecker(params, rr.Hdr.Name) {
+				continue
+			}
+			if entry == nil {
+				entry = NewServiceEntry(trimDot(strings.Replace(rr.Hdr.Name,
+					params.ServiceName(), "", 1)), params.Service, params.Domain)
+			}
+			entry.HostName = rr.Target
+		default:
+			continue
+		}
+	}
+	return entry
+}
+
+func serviceNameChecker(params *LookupParams, rrHdrName string) bool {
+	if params.ServiceInstanceName() != "" && params.ServiceInstanceName() != rrHdrName {
+		return false
+	} else if !strings.HasSuffix(rrHdrName, params.ServiceName()) {
+		return false
+	}
+	return true
+}
+
+func appendEntryIP(entry *ServiceEntry, sections []dns.RR) {
+	for _, answer := range sections {
+		switch rr := answer.(type) {
+		case *dns.A:
+			if entry.HostName == rr.Hdr.Name {
+				entry.AddrIPv4 = append(entry.AddrIPv4, rr.A)
+			}
+		case *dns.AAAA:
+			if entry.HostName == rr.Hdr.Name {
+				entry.AddrIPv6 = append(entry.AddrIPv6, rr.AAAA)
+			}
+		}
+	}
+}
+
+//EdgeSendResponse send resp if it is question
+//ToDo : is all msg has from?
+func (s *Server) edgeSendUnicastResponse(msg *dns.Msg, ifIndex int, from net.Addr) error {
+	resp := dns.Msg{}
+	resp.SetReply(msg)
+	resp.Compress = true
+	resp.RecursionDesired = false
+	resp.Authoritative = true
+	resp.Question = nil // RFC6762 section 6 "responses MUST NOT contain any questions"
+	s.setExtraField(&resp)
+	err := s.unicastResponse(&resp, ifIndex, from)
+	return err
+}
+
+//EdgeAdvertise Send TXT for serviceinfo, SRV for Hostname, A/AAAA for IPs
+func (s *Server) edgeAdvertise() error {
+	var resp dns.Msg
+	s.setExtraField(&resp)
+	err := s.multicastResponse(&resp, 0)
+	return err
+}
+
+func (s *Server) setExtraField(resp *dns.Msg) {
+	txt := &dns.TXT{
+		Hdr: dns.RR_Header{
+			Name:   s.service.ServiceInstanceName(),
+			Rrtype: dns.TypeTXT,
+			Class:  dns.ClassINET,
+			Ttl:    s.ttl,
+		},
+		Txt: s.service.Text,
+	}
+	srv := &dns.SRV{
+		Hdr: dns.RR_Header{
+			Name:   s.service.ServiceInstanceName(),
+			Rrtype: dns.TypeSRV,
+			Class:  dns.ClassINET | qClassCacheFlush,
+			Ttl:    s.ttl,
+		},
+		Priority: 0,
+		Weight:   0,
+		Port:     uint16(s.service.Port),
+		Target:   s.service.HostName,
+	}
+	resp.Extra = append(resp.Extra, txt, srv)
+	resp.Extra = s.appendAddrs(resp.Extra, s.ttl, 0, false)
+}
diff --git a/server.go b/server.go
index 8670151..b35acb9 100644
--- a/server.go
+++ b/server.go
@@ -300,7 +300,7 @@ func (s *Server) parsePacket(packet []byte, ifIndex int, from net.Addr) error {
 		// log.Printf("[ERR] zeroconf: Failed to unpack packet: %v", err)
 		return err
 	}
-	return s.handleQuery(&msg, ifIndex, from)
+	return s.edgeHandleQuery(&msg, ifIndex, from)
 }
 
 // handleQuery is used to handle an incoming query
-- 
2.7.4


From e12b29cb5df9ac977acd333db18d1b28e09af882 Mon Sep 17 00:00:00 2001
From: damon92 <damon92.lee@samsung.com>
Date: Fri, 31 May 2019 15:53:51 +0900
Subject: [PATCH 2/3] edge patch : all chan with select-case

Signed-off-by: damon92 <damon92.lee@samsung.com>
---
 edgeserver.go | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/edgeserver.go b/edgeserver.go
index 3f6c537..1c72595 100644
--- a/edgeserver.go
+++ b/edgeserver.go
@@ -1,6 +1,7 @@
 package zeroconf
 
 import (
+	"log"
 	"net"
 	"strings"
 
@@ -48,7 +49,11 @@ func (s *Server) EdgeGetText() []string {
 //should be called when interface changed.
 func (s *Server) EdgeResetServer(newipv4s []net.IP) {
 	s.service.AddrIPv4 = newipv4s
-	EdgeExportedServiceEntry <- nil
+	select {
+	case EdgeExportedServiceEntry <- nil:
+	default:
+		log.Println("send Chan Full")
+	}
 	s.edgeAdvertise()
 	return
 }
@@ -66,7 +71,11 @@ func (s *Server) edgeHandleQuery(msg *dns.Msg, ifIndex int, from net.Addr) error
 		return err
 	}
 
-	EdgeExportedServiceEntry <- entry
+	select {
+	case EdgeExportedServiceEntry <- entry:
+	default:
+		log.Println("send Chan Full")
+	}
 
 	if msg.Question != nil {
 		err = s.edgeSendUnicastResponse(msg, ifIndex, from)
-- 
2.7.4


From bd072b6574504e1314605ad16d19fb4b28e01b00 Mon Sep 17 00:00:00 2001
From: damon92 <damon92.lee@samsung.com>
Date: Mon, 3 Jun 2019 15:19:17 +0900
Subject: [PATCH 3/3] make Advertise Exportable

---
 edgeserver.go | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/edgeserver.go b/edgeserver.go
index 1c72595..91b8b23 100644
--- a/edgeserver.go
+++ b/edgeserver.go
@@ -18,7 +18,7 @@ func EdgeGetSubscriberChan() (chan *ServiceEntry, error) {
 	if EdgeExportedServiceEntry != nil {
 		return nil, errors.New("Subscribe Chan is Made Before")
 	}
-	EdgeExportedServiceEntry = make(chan *ServiceEntry, 20)
+	EdgeExportedServiceEntry = make(chan *ServiceEntry, 32)
 	return EdgeExportedServiceEntry, nil
 }
 
@@ -33,7 +33,7 @@ func EdgeRegisterProxy(instance, service, domain string, port int,
 	if err != nil {
 		return nil, nil, err
 	}
-	err = server.edgeAdvertise()
+	err = server.EdgeAdvertise()
 	if err != nil {
 		return nil, nil, err
 	}
@@ -45,7 +45,7 @@ func (s *Server) EdgeGetText() []string {
 	return s.service.Text
 }
 
-//EdgeInterfaceChg react to interface change.
+//EdgeResetServer react to interface change.
 //should be called when interface changed.
 func (s *Server) EdgeResetServer(newipv4s []net.IP) {
 	s.service.AddrIPv4 = newipv4s
@@ -54,7 +54,7 @@ func (s *Server) EdgeResetServer(newipv4s []net.IP) {
 	default:
 		log.Println("send Chan Full")
 	}
-	s.edgeAdvertise()
+	s.EdgeAdvertise()
 	return
 }
 
@@ -136,6 +136,8 @@ func newEntryFromAnswer(sections []dns.RR) *ServiceEntry {
 					params.ServiceName(), "", 1)), params.Service, params.Domain)
 			}
 			entry.HostName = rr.Target
+			entry.Port = int(rr.Port)
+			entry.TTL = rr.Hdr.Ttl
 		default:
 			continue
 		}
@@ -182,8 +184,12 @@ func (s *Server) edgeSendUnicastResponse(msg *dns.Msg, ifIndex int, from net.Add
 }
 
 //EdgeAdvertise Send TXT for serviceinfo, SRV for Hostname, A/AAAA for IPs
-func (s *Server) edgeAdvertise() error {
+//and request unicast response.
+func (s *Server) EdgeAdvertise() error {
 	var resp dns.Msg
+	resp.Question = []dns.Question{
+		dns.Question{Name: s.service.ServiceInstanceName(), Qtype: dns.TypeTXT, Qclass: dns.ClassINET},
+	}
 	s.setExtraField(&resp)
 	err := s.multicastResponse(&resp, 0)
 	return err
-- 
2.7.4

