/*******************************************************************************
 * Copyright 2020 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: discovery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cipher "github.com/lf-edge/edge-home-orchestration-go/internal/restinterface/cipher"
	client "github.com/lf-edge/edge-home-orchestration-go/internal/restinterface/client"
	reflect "reflect"
)

// MockDiscovery is a mock of Discovery interface
type MockDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryMockRecorder
}

// MockDiscoveryMockRecorder is the mock recorder for MockDiscovery
type MockDiscoveryMockRecorder struct {
	mock *MockDiscovery
}

// NewMockDiscovery creates a new mock instance
func NewMockDiscovery(ctrl *gomock.Controller) *MockDiscovery {
	mock := &MockDiscovery{ctrl: ctrl}
	mock.recorder = &MockDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscovery) EXPECT() *MockDiscoveryMockRecorder {
	return m.recorder
}

// StartDiscovery mocks base method
func (m *MockDiscovery) StartDiscovery(UUIDpath, platform, executionType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovery", UUIDpath, platform, executionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDiscovery indicates an expected call of StartDiscovery
func (mr *MockDiscoveryMockRecorder) StartDiscovery(UUIDpath, platform, executionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovery", reflect.TypeOf((*MockDiscovery)(nil).StartDiscovery), UUIDpath, platform, executionType)
}

// StopDiscovery mocks base method
func (m *MockDiscovery) StopDiscovery() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopDiscovery")
}

// StopDiscovery indicates an expected call of StopDiscovery
func (mr *MockDiscoveryMockRecorder) StopDiscovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDiscovery", reflect.TypeOf((*MockDiscovery)(nil).StopDiscovery))
}

// DeleteDeviceWithIP mocks base method
func (m *MockDiscovery) DeleteDeviceWithIP(targetIP string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDeviceWithIP", targetIP)
}

// DeleteDeviceWithIP indicates an expected call of DeleteDeviceWithIP
func (mr *MockDiscoveryMockRecorder) DeleteDeviceWithIP(targetIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceWithIP", reflect.TypeOf((*MockDiscovery)(nil).DeleteDeviceWithIP), targetIP)
}

// DeleteDeviceWithID mocks base method
func (m *MockDiscovery) DeleteDeviceWithID(ID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDeviceWithID", ID)
}

// DeleteDeviceWithID indicates an expected call of DeleteDeviceWithID
func (mr *MockDiscoveryMockRecorder) DeleteDeviceWithID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceWithID", reflect.TypeOf((*MockDiscovery)(nil).DeleteDeviceWithID), ID)
}

// AddNewServiceName mocks base method
func (m *MockDiscovery) AddNewServiceName(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewServiceName", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewServiceName indicates an expected call of AddNewServiceName
func (mr *MockDiscoveryMockRecorder) AddNewServiceName(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewServiceName", reflect.TypeOf((*MockDiscovery)(nil).AddNewServiceName), serviceName)
}

// RemoveServiceName mocks base method
func (m *MockDiscovery) RemoveServiceName(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceName", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceName indicates an expected call of RemoveServiceName
func (mr *MockDiscoveryMockRecorder) RemoveServiceName(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceName", reflect.TypeOf((*MockDiscovery)(nil).RemoveServiceName), serviceName)
}

// ResetServiceName mocks base method
func (m *MockDiscovery) ResetServiceName() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetServiceName")
}

// ResetServiceName indicates an expected call of ResetServiceName
func (mr *MockDiscoveryMockRecorder) ResetServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetServiceName", reflect.TypeOf((*MockDiscovery)(nil).ResetServiceName))
}

// AddDeviceInfo mocks base method
func (m *MockDiscovery) AddDeviceInfo(deviceID, virtualAddr, privateAddr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDeviceInfo", deviceID, virtualAddr, privateAddr)
}

// AddDeviceInfo indicates an expected call of AddDeviceInfo
func (mr *MockDiscoveryMockRecorder) AddDeviceInfo(deviceID, virtualAddr, privateAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeviceInfo", reflect.TypeOf((*MockDiscovery)(nil).AddDeviceInfo), deviceID, virtualAddr, privateAddr)
}

// GetOrchestrationInfo mocks base method
func (m *MockDiscovery) GetOrchestrationInfo() (string, string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrchestrationInfo")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOrchestrationInfo indicates an expected call of GetOrchestrationInfo
func (mr *MockDiscoveryMockRecorder) GetOrchestrationInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrchestrationInfo", reflect.TypeOf((*MockDiscovery)(nil).GetOrchestrationInfo))
}

// SetRestResource mocks base method
func (m *MockDiscovery) SetRestResource() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRestResource")
}

// SetRestResource indicates an expected call of SetRestResource
func (mr *MockDiscoveryMockRecorder) SetRestResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestResource", reflect.TypeOf((*MockDiscovery)(nil).SetRestResource))
}

// MNEDCClosedCallback mocks base method
func (m *MockDiscovery) MNEDCClosedCallback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MNEDCClosedCallback")
}

// MNEDCClosedCallback indicates an expected call of MNEDCClosedCallback
func (mr *MockDiscoveryMockRecorder) MNEDCClosedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MNEDCClosedCallback", reflect.TypeOf((*MockDiscovery)(nil).MNEDCClosedCallback))
}

// NotifyMNEDCBroadcastServer mocks base method
func (m *MockDiscovery) NotifyMNEDCBroadcastServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMNEDCBroadcastServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMNEDCBroadcastServer indicates an expected call of NotifyMNEDCBroadcastServer
func (mr *MockDiscoveryMockRecorder) NotifyMNEDCBroadcastServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMNEDCBroadcastServer", reflect.TypeOf((*MockDiscovery)(nil).NotifyMNEDCBroadcastServer))
}

// MNEDCReconciledCallback mocks base method
func (m *MockDiscovery) MNEDCReconciledCallback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MNEDCReconciledCallback")
}

// MNEDCReconciledCallback indicates an expected call of MNEDCReconciledCallback
func (mr *MockDiscoveryMockRecorder) MNEDCReconciledCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MNEDCReconciledCallback", reflect.TypeOf((*MockDiscovery)(nil).MNEDCReconciledCallback))
}

// GetDeviceID mocks base method
func (m *MockDiscovery) GetDeviceID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceID indicates an expected call of GetDeviceID
func (mr *MockDiscoveryMockRecorder) GetDeviceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceID", reflect.TypeOf((*MockDiscovery)(nil).GetDeviceID))
}

// StartMNEDCClient mocks base method
func (m *MockDiscovery) StartMNEDCClient(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMNEDCClient", arg0, arg1)
}

// StartMNEDCClient indicates an expected call of StartMNEDCClient
func (mr *MockDiscoveryMockRecorder) StartMNEDCClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMNEDCClient", reflect.TypeOf((*MockDiscovery)(nil).StartMNEDCClient), arg0, arg1)
}

// StartMNEDCServer mocks base method
func (m *MockDiscovery) StartMNEDCServer(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMNEDCServer", arg0)
}

// StartMNEDCServer indicates an expected call of StartMNEDCServer
func (mr *MockDiscoveryMockRecorder) StartMNEDCServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMNEDCServer", reflect.TypeOf((*MockDiscovery)(nil).StartMNEDCServer), arg0)
}

// SetClient mocks base method
func (m *MockDiscovery) SetClient(clientAPI client.Clienter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", clientAPI)
}

// SetClient indicates an expected call of SetClient
func (mr *MockDiscoveryMockRecorder) SetClient(clientAPI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockDiscovery)(nil).SetClient), clientAPI)
}

// SetCipher mocks base method
func (m *MockDiscovery) SetCipher(cipher cipher.IEdgeCipherer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCipher", cipher)
}

// SetCipher indicates an expected call of SetCipher
func (mr *MockDiscoveryMockRecorder) SetCipher(cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCipher", reflect.TypeOf((*MockDiscovery)(nil).SetCipher), cipher)
}
